
name: NanoVDB Editor Build and Test

on:
  pull_request:
    branches:
      - main
    paths-ignore:
        - 'CODEOWNERS'
        - '**.md'
        - 'dev_utils/**'

# Allow subsequent pushes to the same PR or REF to cancel any previous jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  deployments: write
  pull-requests: read
  issues: read

jobs:
  nanovdb-editor-build-and-test:
    if: ${{ !startsWith(github.event.pull_request.title, 'Draft:') }}
    name: NanoVDB Editor Build
    runs-on:
      - self-hosted
    container:
      image: aswf/ci-openvdb:2024
      env:
        PYTHONPATH: ""
        CPM_SOURCE_CACHE: "/__w/cpm_cache"
      options: --rm
    defaults:
      run:
        shell: bash -el {0}
    steps:
      ### Get the PR branch and apply changes to the target branch
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches
      - name: Determine the target branch of the PR
        run: |
          echo "Fetching pull request metadata..."
          # Install GitHub CLI and jq
          dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          yum install -y gh
          which jq || yum install -y jq
          # Extract PR number from branch name if it follows pattern "pull-request/123"
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Branch name: $BRANCH_NAME"

          # Setup GitHub CLI authentication
          echo "${{ github.token }}" | gh auth login --with-token

          # Get default branch from repository
          echo "Getting default branch from repository..."
          DEFAULT_BRANCH=$(gh repo view ${{ github.repository }} --json defaultBranchRef --jq '.defaultBranchRef.name' 2>/dev/null || echo 'develop')
          echo "Repository default branch is: $DEFAULT_BRANCH"

          if [[ $BRANCH_NAME =~ pull-request/([0-9]+) ]]; then
            PR_NUMBER=${BASH_REMATCH[1]}
            echo "Found PR number from branch name: $PR_NUMBER"

            echo "Using gh CLI to get PR details..."
            # Get PR info using GitHub CLI and extract the base branch
            PR_INFO=$(gh pr view $PR_NUMBER --json baseRefName --repo ${{ github.repository }} 2>/dev/null || echo '{"baseRefName":"'$DEFAULT_BRANCH'"}')
            TARGET_BRANCH=$(echo "$PR_INFO" | jq -r '.baseRefName')

            echo "Target branch is $TARGET_BRANCH"

            if [ -z "$TARGET_BRANCH" ] || [ "$TARGET_BRANCH" = "null" ]; then
              echo "Could not determine target branch, using default branch"
              TARGET_BRANCH="$DEFAULT_BRANCH"
            fi
          else
            echo "Branch doesn't match the expected pattern, using default branch"
            TARGET_BRANCH="$DEFAULT_BRANCH"
          fi

          echo "Final TARGET_BRANCH=$TARGET_BRANCH"
          echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Merge pushed branch into target branch
        run: |
          if [ -z "$TARGET_BRANCH" ]; then
            echo "No pull request metadata found. Skipping merge."
            exit 0
          fi
          git config --global --add safe.directory "$(pwd)"
          git fetch origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH
          git merge $GITHUB_REF --no-ff --message "Merging $GITHUB_REF into $TARGET_BRANCH"
        env:
          GITHUB_REF: ${{ github.ref }}
      #### End of git merge

      - name: Install system dependencies
        run: |
          # Install required system packages
          dnf update -y
          dnf install -y glfw glfw-devel vulkan-headers vulkan-loader vulkan-tools

      - name: Build NanoVDB Editor
        run: |
          chmod +x ./build.sh
          ./build.sh -rfv
          ./build.sh -pv

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
            name: nanovdb-editor-build
            path: |
              nanovdb_editor/build/
              pymodule/dist/
              test_c/build/
            retention-days: 2

      - name: Run tests
        run: |
          ctest --test-dir build/Release/gtests -C Release --output-on-failure --verbose

      - name: Set up nanovdb_editor Conda env
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          conda-remove-defaults: "true"
          activate-environment: nanovdb_editor
          environment-file: nanovdb_editor/pymodule/environment.yml

      - name: Install package
        run: |
            conda activate nanovdb_editor
            cd pymodule
            pip install ./dist/*.whl

      - name: Run Python tests
        run: |
          python3 test/test_shader.py

      - name: Build and run NanoVDB Editor C tests
        run: |
          cd pymodule/test_c
          chmod +x ./build.sh
          ./build.sh
          if [ -f "build/pnanovdbeditortestcapp" ]; then
            echo "Running C tests..."
            chmod +x ./build/pnanovdbeditortestcapp
            ./build/pnanovdbeditortestcapp
          else
            echo "No C test application found"
          fi

      - name: Build C++ Python module test (no run)
        run: |
          cd pymodule/test_cpp
          chmod +x ./build.sh
          ./build.sh

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up /__w/_temp directory"
          sudo rm -rf /__w/_temp/*
          echo "Cleanup completed"

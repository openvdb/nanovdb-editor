name: NanoVDB Editor Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
        - 'CODEOWNERS'
        - '**.md'
        - 'dev_utils/**'
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build"
        required: true
        default: "main"

# Allow subsequent pushes to the same PR or REF to cancel any previous jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  deployments: write
  pull-requests: read
  issues: read

jobs:
  nanovdb-editor-build-and-test:
    # if: ${{ !startsWith(github.event.pull_request.title, 'Draft:') }}
    name: NanoVDB Editor Build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Vulkan runtime (headless)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y libvulkan1 mesa-vulkan-drivers vulkan-tools
      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.conda
            nanovdb_editor/build/
          key: ${{ runner.os }}-nanovdb-editor-${{ hashFiles('**/environment.yml') }}

      - name: Build NanoVDB Editor Standalone
        run: |
          set -e
          chmod +x ./build.sh
          ./build.sh -rfv

      - name: Build NanoVDB Editor Python module
        run: |
          set -e
          chmod +x ./build.sh
          ./build.sh -pv

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nanovdb-editor-build
          path: |
            build/
            pymodule/dist/
          retention-days: 2

      - name: Run tests
        run: |
          set -e
          export LD_LIBRARY_PATH=$PWD/build/Release/lib:$PWD/build/Release/bin:$LD_LIBRARY_PATH
          echo "Link system libvulkan into build lib dir (for dynamic loader lookup)" || true
          VULKAN_SO=$(ldconfig -p | awk '/libvulkan\.so\.1 \(/{print $4; exit}') || true
          if [ -n "$VULKAN_SO" ]; then
            ln -sf "$VULKAN_SO" build/Release/lib/libvulkan.so.1 || true
          fi
          echo "VULKAN_INFO:" || true
          vulkaninfo | head -200 || true
          echo "ldd on ComputeDispatchTest:" || true
          ldd build/Release/gtests/ComputeDispatchTest || true
          echo "List built libs:" || true
          ls -l build/Release/lib || true
          ls -l build/Release/bin || true
          ctest --test-dir build/Release/gtests -C Release --output-on-failure --verbose

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install package
        run: |
          set -e
          cd pymodule
          pip install ./dist/*.whl

      - name: Run Python tests
        run: |
          set -e
          python3 test/test_shader.py

      - name: Build and run NanoVDB Editor C tests
        run: |
          set -e
          cd pymodule/test_c
          chmod +x ./build.sh
          ./build.sh
          if [ -f "build/pnanovdbeditortestcapp" ]; then
            echo "Running C tests..."
            chmod +x ./build/pnanovdbeditortestcapp
            ./build/pnanovdbeditortestcapp
          else
            echo "No C test application found"
          fi

      - name: Build C++ Python module test (no run)
        run: |
          set -e
          cd pymodule/test_cpp
          chmod +x ./build.sh
          ./build.sh

name: Build and publish Python wheels

on:
  push:
    tags:
      - 'v*'
    branches:
      - develop  # For testing
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.5
      env:
        CIBW_BUILD: cp311-*
        CIBW_SKIP: "*-manylinux_i686 pp* *-win32 *-macosx*"
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_WINDOWS: AMD64
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
        # Linux dependencies
        CIBW_BEFORE_ALL_LINUX: |
          dnf install -y cmake git
          cmake --version

        # Windows dependencies
        CIBW_BEFORE_ALL_WINDOWS: |
          python -m pip install cmake
          cmake --version

        CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
          auditwheel repair -w {dest_dir} {wheel} --lib-sdir .libs || cp {wheel} {dest_dir}/

        # Install test dependencies before testing
        CIBW_TEST_REQUIRES: numpy

        # Test the wheels
        CIBW_TEST_COMMAND: python -c "import nanovdb_editor; print('Import successful')"
      with:
        package-dir: pymodule

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Build sdist
      run: pipx run build --sdist
      working-directory: pymodule

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: pymodule/dist/*.tar.gz

  # Test upload from develop branch
  upload_test_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: "*"
        merge-multiple: true
        path: dist/

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

  # Production upload for version tags
  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: "*"
        merge-multiple: true
        path: dist/

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

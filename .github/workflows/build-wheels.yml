name: Build and publish Python wheels

on:
  push:
    tags:
      - 'v*'
    branches:
      - develop  # For testing
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-manylinux_i686 pp*"
        CIBW_ARCHS_LINUX: x86_64
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28

        # For manylinux_2_28 (AlmaLinux 8 based)
        CIBW_BEFORE_ALL_LINUX: |
          dnf install -y cmake git
          cmake --version

        # Test the wheels
        CIBW_TEST_COMMAND: python -c "import nanovdb_editor; print('Import successful')"
      with:
        package-dir: pymodule

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build sdist
      run: pipx run build --sdist
      working-directory: pymodule

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: pymodule/dist/*.tar.gz

  # Test upload from develop branch
  upload_test_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist/

    - uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist/

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

  # Production upload for version tags (with OIDC when workflow is on main)
  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist/

    - uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist/

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

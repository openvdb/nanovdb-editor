name: Build and Test Python

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
        - 'CODEOWNERS'
        - '**.md'
        - 'dev_utils/**'
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build"
        required: true
        default: "main"

# Allow subsequent pushes to the same PR or REF to cancel any previous jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  deployments: write
  pull-requests: read
  issues: read

jobs:
  nanovdb-editor-build-and-test:
    # if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.draft }}
    name: NanoVDB Editor Build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/checkout@v4
      - name: Set up Conda env
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          conda-remove-defaults: "true"
          activate-environment: fvdb_test
          environment-file: pymodule/environment.yml

      - name: Install Vulkan runtime (headless)
        run: |
          conda activate nanovdb_editor
          sudo apt-get update
          sudo apt-get install -y mesa-vulkan-drivers vulkan-tools

      - name: Build NanoVDB Editor Python module
        run: |
          conda activate nanovdb_editor
          chmod +x ./build.sh
          ./build.sh -pv

      - name: Upload python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nanovdb-editor-python-build
          path: |
            pymodule/dist/
          retention-days: 2

      - name: Run Python tests
        run: |
          conda activate nanovdb_editor
          pytest -vvv

      - name: Build and run NanoVDB Editor C tests
        run: |
          conda activate nanovdb_editor
          cd pymodule/test_c
          chmod +x ./build.sh
          ./build.sh
          if [ -f "build/pnanovdbeditortestcapp" ]; then
            echo "Running C tests..."
            chmod +x ./build/pnanovdbeditortestcapp
            ./build/pnanovdbeditortestcapp
          else
            echo "No C test application found"
          fi

      - name: Build C++ Python module test (no run)
        run: |
          conda activate nanovdb_editor
          cd pymodule/test_cpp
          chmod +x ./build.sh
          ./build.sh
